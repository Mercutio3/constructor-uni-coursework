PROBLEM 1
-----------
#include <stdio.h>

int main(){
    int n;
    int p = 'A';
    scanf("%d", &n);
    for(int i=0; i<n; i++){
        for(int j=0;j<i+1;j++){
            printf("%c", p+j);
        }
    }
    Return 0;
}


PROBLEM 2
-----------
#include <stdio.h>

int main(){
    double d;
    scanf("%lf", &d);
    float f;
    scanf("%f", &f);
    int i;
    scanf("%d", &i);

    double result = d * f * i;
    int *r_ptr = &result;
    r_ptr += 5;

    printf("%lf", &result);
    printf("%lf", *r_ptr);

    return 0;
}

PROBLEM 3
-----------
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

Int main(){
    Int n;
    scanf("%d", &n);
    int *numArray = malloc(sizeof(int)*n);

    FILE *outFile = fopen("output.txt", "w");
    assert(outFile!=NULL);

    for(int I=0; I < n; I++){
        scanf("%d", &numArray[I]);
    }

    for(int i=n-1; i > 0 ; i--){
        fprintf(outFile, "%d %d\n", numArray[i], numArray[i]*numArray[I]);
    }

    fclose(outFile);
    free(numArray);

    return 0;
}

PROBLEM 10
-----------
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

Int main(){
    FILE *inFile = fopen("matrix.dat", "r");
    assert(inFile!=NULL);

    fscanf(inFile, "%d", &r);
    fscanf(inFile, "%d", &c);

    int **matrix = malloc(sizeof(int*)*r);
    assert(matrix!=NULL);

    for(int I=0;i<r;i++){
        matrix[r] = malloc(sizeof(int)*c);
        assert(matrix[r]!=NULL);
    }

    for(int i=0;i<r;i++){
        matrix[r][c] = 0;
    }

    int x, y, value;
    fscanf(inFile, "%d %d %d", &x, &y, &value);
    matrix[x-1][y-1] = value;
    fscanf(inFile, "%d %d %d", &x, &y, &value);
    matrix[x-1][y-1] = value;

    fclose(inFile);
    print_matrix(matrix, r, c);

    for(int I=0; i<r; I++){
        free(matrix[I]);
    }

    free(matrix);
    return 0;
}

void print_matrix(int **A, int rows, int cols){
    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            printf("%d ", A[rows][cols]);
        }
        printf("\n");
    }
}

Friend ostream& operator<<(ostream& out, const 

Friend istream& operator>>(istream&in 





